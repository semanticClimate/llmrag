digraph IPCCPipelineCore {
    // Graph settings
    rankdir=LR;
    node [shape=box, style=filled, fontname="Arial", fontsize=12];
    edge [fontname="Arial", fontsize=10];
    
    // Input
    subgraph cluster_input {
        label="Input";
        style=filled;
        color=lightblue;
        
        URL [label="IPCC Chapter URL\n(https://www.ipcc.ch/...)", shape=cylinder, fillcolor=lightcyan];
        CONFIG [label="Pipeline Config\n(YAML)", shape=note, fillcolor=lightyellow];
    }
    
    // Stage 1: Download
    subgraph cluster_download {
        label="Stage 1: Download";
        style=filled;
        color=lightcoral;
        
        SELENIUM [label="Selenium\nHeadless Browser", fillcolor=lightpink];
        REQUESTS [label="Requests\n(Fallback)", fillcolor=lightpink];
        RAW_HTML [label="Raw HTML\nContent", shape=cylinder, fillcolor=lightcyan];
    }
    
    // Stage 2: Clean
    subgraph cluster_clean {
        label="Stage 2: Clean";
        style=filled;
        color=lightgoldenrod;
        
        EXTRACT [label="Content Extraction\n(Readability/Trafilatura)", fillcolor=lightyellow];
        CLEAN_MARKUP [label="Remove Markup\n(Ads, Navigation, Gatsby, WordPress)", fillcolor=lightyellow];
        CLEAN_HTML [label="Cleaned HTML\nContent", shape=cylinder, fillcolor=lightcyan];
    }
    
    // Stage 3: Structure
    subgraph cluster_structure {
        label="Stage 3: Structure";
        style=filled;
        color=lightsteelblue;
        
        ID_GEN [label="ID Generation\n(semantic_hierarchical)", fillcolor=lightblue];
        ADD_IDS [label="Add Paragraph IDs\n{section}_{subsection}_{paragraph}", fillcolor=lightblue];
        FINAL_HTML [label="Final HTML\nwith Paragraph IDs", shape=cylinder, fillcolor=lightcyan];
    }
    
    // Stage 4: Chunk (Enhanced)
    subgraph cluster_chunk {
        label="Stage 4: Chunk (Enhanced)";
        style=filled;
        color=lightgreen;
        
        HTML_SPLITTER [label="HTML Text Splitter\n(500 char chunks)", fillcolor=lightgreen];
        TEXT_CHUNKS [label="Text Chunks\n+ Metadata", shape=cylinder, fillcolor=lightcyan];
    }
    
    // Stage 5: Embed (New)
    subgraph cluster_embed {
        label="Stage 5: Embed (New)";
        style=filled;
        color=lightcoral;
        
        SENTENCE_TRANSFORMERS [label="Sentence Transformers\n(all-MiniLM-L6-v2)", fillcolor=lightpink];
        VECTOR_EMBEDDINGS [label="Vector Embeddings\n(384 dimensions)", shape=cylinder, fillcolor=lightcyan];
    }
    
    // Stage 6: Store (New)
    subgraph cluster_store {
        label="Stage 6: Store (New)";
        style=filled;
        color=lightgoldenrod;
        
        CHROMA_DB [label="ChromaDB\nVector Database", fillcolor=lightyellow];
        USER_COLLECTION [label="User Collection\n(ipcc_chapter_user)", shape=cylinder, fillcolor=lightcyan];
        CACHE_CHECK [label="Cache Check\n(Skip if exists)", fillcolor=lightgreen];
    }
    
    // Output
    subgraph cluster_output {
        label="Output";
        style=filled;
        color=lightgreen;
        
        HTML_OUT [label="HTML File\n(processed.html)", shape=note, fillcolor=lightyellow];
        JSON_OUT [label="JSON File\n(metadata.json)", shape=note, fillcolor=lightyellow];
        MD_OUT [label="Markdown File\n(content.md)", shape=note, fillcolor=lightyellow];
        VECTOR_OUT [label="Vector Store\n(Ready for RAG)", shape=cylinder, fillcolor=lightcyan];
    }
    
    // Connections
    URL -> SELENIUM [label="download"];
    URL -> REQUESTS [label="download"];
    CONFIG -> SELENIUM [label="configure"];
    CONFIG -> REQUESTS [label="configure"];
    
    SELENIUM -> RAW_HTML [label="HTML"];
    REQUESTS -> RAW_HTML [label="HTML"];
    
    RAW_HTML -> EXTRACT [label="extract content"];
    EXTRACT -> CLEAN_MARKUP [label="remove markup"];
    CLEAN_MARKUP -> CLEAN_HTML [label="cleaned"];
    
    CLEAN_HTML -> ID_GEN [label="generate IDs"];
    ID_GEN -> ADD_IDS [label="add IDs"];
    ADD_IDS -> FINAL_HTML [label="structured"];
    
    // New RAG connections
    FINAL_HTML -> CACHE_CHECK [label="check if exists"];
    CACHE_CHECK -> HTML_SPLITTER [label="process if new"];
    HTML_SPLITTER -> TEXT_CHUNKS [label="chunked text"];
    TEXT_CHUNKS -> SENTENCE_TRANSFORMERS [label="generate embeddings"];
    SENTENCE_TRANSFORMERS -> VECTOR_EMBEDDINGS [label="vector representations"];
    VECTOR_EMBEDDINGS -> CHROMA_DB [label="store vectors"];
    CHROMA_DB -> USER_COLLECTION [label="user-specific"];
    
    // Output connections
    FINAL_HTML -> HTML_OUT [label="export"];
    FINAL_HTML -> JSON_OUT [label="export"];
    FINAL_HTML -> MD_OUT [label="export"];
    USER_COLLECTION -> VECTOR_OUT [label="export"];
    
    // Stage dependencies
    edge [style=dashed, color=gray, label="depends on"];
    RAW_HTML -> CLEAN_HTML;
    CLEAN_HTML -> FINAL_HTML;
    FINAL_HTML -> TEXT_CHUNKS;
    TEXT_CHUNKS -> VECTOR_EMBEDDINGS;
    VECTOR_EMBEDDINGS -> USER_COLLECTION;
    
    // Performance indicators
    edge [style=dashed, color=green, label="100% faster"];
    CACHE_CHECK -> USER_COLLECTION;
} 